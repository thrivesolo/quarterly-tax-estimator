generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  accounts              Account[]
  sessions              Session[]
  taxCalculations       TaxCalculation[]
  emailReminders        EmailReminder[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model TaxCalculation {
  id                    String           @id @default(cuid())
  userId                String           @map("user_id")
  quarter               Int
  year                  Int
  businessStructure     BusinessStructure @map("business_structure")
  currentYearIncome     Decimal          @map("current_year_income")
  businessExpenses      Decimal          @map("business_expenses")
  priorYearTaxOwed      Decimal          @map("prior_year_tax_owed")
  selfEmploymentTax     Boolean          @map("self_employment_tax")
  recommendedPayment    Decimal          @map("recommended_payment")
  calculationMethod     String           @map("calculation_method")
  createdAt             DateTime         @default(now()) @map("created_at")
  updatedAt             DateTime         @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, quarter, year])
  @@map("tax_calculations")
}

model EmailReminder {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  quarter   Int
  year      Int
  amount    Decimal
  dueDate   DateTime @map("due_date")
  sent      Boolean  @default(false)
  sentAt    DateTime? @map("sent_at")
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("email_reminders")
}

enum BusinessStructure {
  SOLE_PROPRIETORSHIP
  PARTNERSHIP
  LLC_SOLE_PROP
  LLC_S_CORP
  S_CORP
}
